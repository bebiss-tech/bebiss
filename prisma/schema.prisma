generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  ADMIN_SYSTEM
  ADMIN_COMPANY
  PROFESSIONAL
}

model User {
  id               String    @id @default(uuid())
  name             String?
  phone            String?
  email            String?   @unique
  emailVerified    DateTime?
  password         String?
  image            String?
  stripeCustomerId String?
  role             UserRole  @default(ADMIN_COMPANY)
  companyId        String?

  accounts     Account[]
  sessions     Session[]
  subscription Subscription[]
  companies    Company?       @relation(fields: [companyId], references: [id])

  addressId String?  @unique
  address   Address? @relation(fields: [addressId], references: [id])

  appointmentId String?      @unique
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])

  @@index([companyId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                   String   @id @default(uuid())
  userId               String
  status               String
  stripePriceId        String
  stripeSubscriptionId String
  currentPeriodEnd     Int
  currentPeriodStart   Int
  amount               Int
  latestInvoiceId      String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  planId               String

  plan Plan @relation(fields: [planId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@index([planId])
  @@index([userId])
}

enum IntervalEnum {
  month
  quarter
  semiannual
  year
}

model Plan {
  id              String       @id @default(uuid())
  name            String
  priceInCents    Int
  interval        IntervalEnum
  stripePriceId   String
  stripeProductId String
  active          Boolean
  benefits        Json?        @default("[]")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  subscriptions Subscription[]
}

model Address {
  id           String @id @default(uuid())
  zipCode      String
  state        String
  city         String
  neighborhood String
  street       String
  number       String

  client  Client?
  user    User?
  company Company?
}

model Company {
  id           String        @id @default(uuid())
  name         String
  users        User[]
  services     Service[]
  clients      Client[]
  appointments Appointment[]
  templates    Template[]
  addressId    String        @unique
  address      Address       @relation(fields: [addressId], references: [id])
}

model Service {
  id                String  @id @default(uuid())
  name              String
  daysBeforeCalling Int
  duratioInMinutes  Int
  instructions      String? @db.Text
  priceInCents      Int?

  companyId     String
  company       Company      @relation(fields: [companyId], references: [id])
  appointmentId String?
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])

  @@index([companyId])
  @@index([appointmentId])
}

enum Gender {
  male
  famale
  uninformed
}

model Client {
  id             String    @id @default(uuid())
  name           String
  email          String?
  phone          String
  secundaryPhone String?
  cpf            String?
  birthday       DateTime?
  gender         Gender?

  appointments Appointment[]

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  addressId String  @unique
  address   Address @relation(fields: [addressId], references: [id])

  @@index([companyId])
}

enum AppointmentStatus {
  CREATED
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
  ATTENDED
  MISSED
  DOCTOR_MISSED
}

model Appointment {
  id            String            @id @default(uuid())
  startDateTime DateTime
  endDateTime   DateTime
  clientId      String
  companyId     String
  comment       String?           @db.Text
  status        AppointmentStatus @default(CREATED)
  priceInCents  Int?
  paid          Boolean?          @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  services Service[]
  historic Historic[]
  client   Client     @relation(fields: [clientId], references: [id])
  company  Company    @relation(fields: [companyId], references: [id])
  user     User?

  @@index([clientId])
  @@index([companyId])
}

enum HistoricType {
  APPOINTMENT_CREATED
  APPOINTMENT_CANCELED
  APPOINTMENT_CONFIRMED
  APPOINTMENT_COMPLETED
  APPOINTMENT_ATTENDED
  APPOINTMENT_MISSED
  APPOINTMENT_DOCTOR_MISSED
  WHATSAPP_MESSAGE_SENT
  WHATSAPP_MESSAGE_RECEIVED
  SMS_MESSAGE_SENT
  SMS_MESSAGE_RECEIVED
  MAIL_SENT
  MAIL_OPENED
  MAIL_CLICKED_CONFIRMATION
  MAIL_CLICKED_CANCELATION
}

model Historic {
  id            String       @id @default(uuid())
  type          HistoricType
  to            String?
  content       String?      @db.Text
  date          DateTime
  createdAt     DateTime     @default(now())
  appointmentId String?
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])

  @@index([appointmentId])
}

enum TemplateType {
  WHATSAPP
  SMS
  EMAIL
}

model Template {
  id        String       @id @default(uuid())
  type      TemplateType @default(WHATSAPP)
  content   String
  companyId String?
  company   Company?     @relation(fields: [companyId], references: [id])

  @@index([companyId])
}
